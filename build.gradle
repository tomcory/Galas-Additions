import java.util.regex.Pattern

// Forces correct lwjgl version
// (net.minecraft:client:1.12.2 tries to load org.lwjgl.lwjgl:lwjgl-platform:2.9.2-nightly-20140822 which does not exist?)
configurations.all {
    resolutionStrategy {
        force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
    }
}

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// Load values from gradle.properties
file "gradle.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

ext.simpleVersion = "${config.mod.version.major}.${config.mod.version.minor}.${config.mod.version.patch}"

version = "${config.minecraft.version}-${project.simpleVersion}"
group = config.mod.group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod.name

// Need this here so eclipse task generates correctly.
sourceCompatibility = compileJava.sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'


    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')


            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven {
        url = "http://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "http://maven.ic2.player.to"
    }
    maven {
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        url = "http://chickenbones.net/maven/"
    }
    maven {
        url = "https://mod-buildcraft.com/maven/"
    }
    maven {
        url = "https://maven.cil.li/"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${config.minecraft.version}-${config.forge.version}"

    compile "li.cil.oc:OpenComputers:MC${config.minecraft.version}-${config.opencomputers.version}:api"
    compile "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.+"
    compile "mezz.jei:jei_1.12.2:+"
    compile "mcp.mobius.waila:Hwyla:1.8+:sources"
    compile "net.sengir.forestry:forestry_1.12.2:+"
    compile "gregtechce:gregtech:1.12.2:1.8.13.465"
    compile "codechicken:ChickenASM:1.12-+"
    compile "codechicken-lib-1-8:CodeChickenLib-1.12.2:3.2.3.357:universal"
    compile "forge-multipart-cbe:ForgeMultipart-1.12.2:2.6.2.83:universal"
    compile "com.mod-buildcraft:buildcraft-api:+"
    compile "slimeknights.mantle:Mantle:1.12-1.3.3.42"
    compile "slimeknights:TConstruct:1.12.2-2.12.0.115"
}


/*processResources {
    def buildProps = new Properties()
    buildProps.load(file('gradle.properties').newReader())

    filter { String line ->
        line.findAll(/\$\{([a-z,A-Z,0-9,\.]+)\}/).each {
            def key = it.replace("\${", "").replace("}", "")
            if (buildProps[key] != null)
            {
                line = line.replace(it, buildProps[key])
            }
        }
        line
    }
}*/

processResources {
    def buildProps = new Properties()
    buildProps.load(file('gradle.properties').newReader())

    eachFile { copyDetails ->
        //if (copyDetails.path == 'GregicAdditions.java') {
            filter { String line ->
                line.findAll(/\$\{([a-z,A-Z,0-9,\.]+)\}/).each {
                    def key = it.replace("\${", "").replace("}", "")
                    if (buildProps[key] != null)
                    {
                        line = line.replace(it, buildProps[key])
                    }
                }
                line
            }
        //}
    }
}

def UpdateVersionFile = {
    def sourceFile = file("src/main/java/gregicadditions/GregicAdditionsVersion.java")

    def buildProps = new Properties()
    buildProps.load(file("gradle.properties").newReader())

    def updatedSourceFile = ""
    def searchPattern = Pattern.compile(/^( *)public static final int (MAJOR|MINOR|PATCH) = [\d]+;$/)

    sourceFile.eachLine { String line ->
        line.find(searchPattern) {
            def key = "mod.version." + it[2].toLowerCase()
            if (buildProps[key] != null) {
                line = it[1] + "public static final int " + it[2] + " = " + buildProps[key] + ";"
            }
        }
        updatedSourceFile += line + "\n"
    }

    sourceFile.write(updatedSourceFile)
}

tasks.build.doFirst {
    UpdateVersionFile()
}

jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
